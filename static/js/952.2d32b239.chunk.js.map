{"version":3,"file":"static/js/952.2d32b239.chunk.js","mappings":"kQAEaA,GAAWC,EAAAA,EAAAA,IAAO,KAAPA,CAAH,6CAIRC,GAAYD,EAAAA,EAAAA,IAAO,MAAPA,CAAH,2DAKTE,GAAOF,EAAAA,EAAAA,IAAO,KAAPA,CAAH,6J,SCRJG,EAAW,SAAC,GAAc,IAC7BC,EAD4B,EAAXC,KACDC,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,aAAcC,EAA5B,EAA4BA,KAAMC,EAAlC,EAAkCA,GAAlC,OACtB,UAACX,EAAD,YACI,SAACE,EAAD,CAAWU,IAAKH,EAAY,yCAAsCA,GAC/D,yHAA2HI,IAAKH,KACnI,uBAAIA,KACJ,uCAAeF,OAJJG,EADO,IAQ1B,OACI,SAACR,EAAD,UACKE,GAGZ,ECsBD,EAhCa,WACT,OAAwBS,EAAAA,EAAAA,UAAS,MAAjC,eAAOR,EAAP,KAAaS,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,QAArC,eAAOE,EAAP,KAAeC,EAAf,KACA,GAAwCH,EAAAA,EAAAA,UAAS,IAAjD,eAAOI,EAAP,KAAqBC,EAArB,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,SAcR,OAZAE,EAAAA,EAAAA,YAAU,WACNC,EAAAA,EAAAA,aAAiBH,EAAU,YAAYI,MAAK,SAACC,GACzCV,EAAQU,EAAInB,MACZW,EAAU,WAEb,IAAES,OAAM,SAACC,GACNR,EAAgB,+CAChBF,EAAU,YACVW,QAAQC,MAAMF,EAAIG,QACrB,GACJ,GAAE,CAACV,KAGA,UAACW,EAAA,EAAD,WACgB,aAAXf,IAAyB,SAACZ,EAAD,CAAUE,KAAMA,IAC9B,aAAXU,IAAyB,uBAAIE,MAGzC,C,sEC7BYc,GAAU/B,E,QAAAA,IAAO,UAAPA,CAAH,sE,SCCP8B,EAAY,SAAC,GAAkB,IAAhBE,EAAe,EAAfA,SACxB,OACI,SAACD,EAAD,UACKC,GAGZ,C,2GCRKC,EAAU,mCACVC,EAAW,gCAEXC,EAAW,mCAAG,6GAEKC,IAAAA,IAAA,UAAaF,EAAb,sBAA2C,CAC9DG,OAAQ,CACNC,QAASL,KAJG,cAEVM,EAFU,yBAOTA,EAAOC,MAPE,sCASV,IAAIC,MAAM,KAAMZ,SATN,yDAAH,qDAaXa,EAAe,mCAAG,WAAMC,GAAN,gGAECP,IAAAA,IAAA,UAAaF,EAAb,gBAAqC,CACxDG,OAAQ,CACNM,MAAAA,EACAL,QAASL,KALO,cAEdM,EAFc,yBAQbA,EAAOC,MARM,sCAUd,IAAIC,MAAM,KAAMZ,SAVF,yDAAH,sDAcfe,EAAY,mCAAG,WAAOlC,GAAP,4FAAWmC,EAAX,+BAAkB,GAAlB,kBAEIT,IAAAA,IAAA,UAAaF,EAAb,iBAA8BxB,GAA9B,OAAmCmC,GAAQ,CAC9DR,OAAQ,CACNC,QAASL,KAJI,cAEXM,EAFW,yBAOVA,EAAOC,MAPG,sCASX,IAAIC,MAAM,KAAMZ,SATL,yDAAH,sDAaLP,EAAM,CACjBsB,aAAAA,EACAT,YAAAA,EACAO,gBAAAA,E","sources":["components/Cast/CastList.styled.js","components/Cast/CastList.jsx","components/Cast/Cast.jsx","components/Container/Container.styled.js","components/Container/Container.jsx","services/api.services.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastItem = styled('li')`\n  list-style: none;\n`;\n\nexport const CastImage = styled('img')`\n  width: 120px;\n  height: 180px;\n`;\n\nexport const List = styled('ul')`\n  padding: 0;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  gap: 10px;\n  text-align: center;\n  font-size: 12px;\n`;\n","import PropTypes from 'prop-types';\nimport { CastItem, CastImage, List } from \"./CastList.styled\";\n\nexport const CastList = ({ cast }) => {\n    const elements = cast.map(({ character, profile_path, name, id }) => (\n        <CastItem key={id}>\n            <CastImage src={profile_path ? (`https://image.tmdb.org/t/p/w500${profile_path}`)\n            : (\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/No-Image-Placeholder.svg/1665px-No-Image-Placeholder.svg.png\")} alt={name} />\n            <p>{name}</p>\n            <p>Character: {character}</p>\n        </CastItem>));\n    \n    return (\n        <List>\n            {elements}\n        </List>\n    )\n};\n\nCastList.propTypes = {\n    cast: PropTypes.arrayOf(PropTypes.shape({\n        character: PropTypes.string,\n        profile_path: PropTypes.string,\n        name: PropTypes.string.isRequired,\n        id: PropTypes.number.isRequired,\n    })\n)};\n","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport { API } from \"services/api.services\";\nimport { Container } from \"components/Container/Container\";\nimport { CastList } from \"components/Cast/CastList\";\n\nconst Cast = () => {\n    const [cast, setCast] = useState(null);\n    const [status, setStatus] = useState('idle');\n    const [errorMessage, setErrorMessage] = useState('');\n    const { moviesId } = useParams();\n    \n    useEffect(() => {\n        API.getMovieById(moviesId, '/credits').then((res) => {\n            setCast(res.cast);\n            setStatus('resolved');\n            \n        }).catch((err) => {\n            setErrorMessage(\"Oops, something went wrong. Try again later\");\n            setStatus('rejected');\n            console.error(err.message);\n        });\n    }, [moviesId]);\n    \n    return (\n        <Container>\n            {status === 'resolved' && <CastList cast={cast} />}\n            {status === 'rejected' && <p>{errorMessage}</p>}\n        </Container>\n    )\n};\n\nCast.propTypes = {\n    status: PropTypes.string,\n    cast: PropTypes.array,\n    errorMessage: PropTypes.string,\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled('section')`\n  padding: 20px 30px;\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { Wrapper } from './Container.styled';\n\nexport const Container = ({ children }) => {\n    return (\n        <Wrapper>\n            {children}\n        </Wrapper>\n    )\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n","import axios from 'axios';\nconst API_KEY = 'b4aae86baf5bc9ee729e045fe7a7b511';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst getTrending = async () => {\n  try {\n    const result = await axios.get(`${BASE_URL}trending/movie/day`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nconst getSearchMovies = async query => {\n  try {\n    const result = await axios.get(`${BASE_URL}search/movie`, {\n      params: {\n        query,\n        api_key: API_KEY,\n      },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nconst getMovieById = async (id, info = '') => {\n  try {\n    const result = await axios.get(`${BASE_URL}movie/${id}${info}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const API = {\n  getMovieById,\n  getTrending,\n  getSearchMovies,\n};\n"],"names":["CastItem","styled","CastImage","List","CastList","elements","cast","map","character","profile_path","name","id","src","alt","useState","setCast","status","setStatus","errorMessage","setErrorMessage","moviesId","useParams","useEffect","API","then","res","catch","err","console","error","message","Container","Wrapper","children","API_KEY","BASE_URL","getTrending","axios","params","api_key","result","data","Error","getSearchMovies","query","getMovieById","info"],"sourceRoot":""}