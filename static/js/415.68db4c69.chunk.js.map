{"version":3,"file":"static/js/415.68db4c69.chunk.js","mappings":"sLAEaA,GAAUC,E,QAAAA,IAAO,UAAPA,CAAH,sE,SCCPC,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxB,OACI,SAACH,EAAD,UACKG,GAGZ,C,+FCNYC,GAAOH,EAAAA,EAAAA,IAAO,KAAPA,CAAH,yMAWJI,GAAWJ,EAAAA,EAAAA,IAAO,KAAPA,CAAH,mMAWRK,GAAaL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,qEAKVO,GAAQP,EAAAA,EAAAA,IAAO,MAAPA,CAAH,+E,SC3BLQ,EAAY,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAC1BC,EAAWF,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,GAAIC,EAApB,EAAoBA,YAApB,OACxB,SAACZ,EAAD,WACI,UAACC,EAAD,CAAYY,GAAE,kBAAaF,GAAMG,MAAO,CAAER,KAAAA,GAA1C,WACI,SAACH,EAAD,CAAOY,IAAG,yCAAoCH,GAAeI,IAAKP,GAAQC,KAC1E,uBAAID,GAAQC,QAHLC,EADS,IAQ5B,OACI,SAACZ,EAAD,UACKQ,GAGZ,C,qGCeD,UAzBa,WACT,OAA0CU,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACMC,GAAWC,EAAAA,EAAAA,MAQjB,OANAC,EAAAA,EAAAA,YAAU,WACNC,EAAAA,EAAAA,cAAkBC,MAAK,SAACC,GACpBN,EAAiBM,EAAIC,QACxB,IAAEC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAIG,QAAtB,GACf,GAAE,KAGC,2BACI,UAAC,IAAD,YACI,4CACA,SAAC,IAAD,CAAW1B,OAAQa,EAAeZ,KAAMc,EAASY,eAIhE,C,2GCxBKC,EAAU,mCACVC,EAAW,gCAEXC,EAAW,mCAAG,6GAEKC,IAAAA,IAAA,UAAaF,EAAb,sBAA2C,CAC9DG,OAAQ,CACNC,QAASL,KAJG,cAEVM,EAFU,yBAOTA,EAAOC,MAPE,sCASV,IAAIC,MAAM,KAAMV,SATN,yDAAH,qDAaXW,EAAe,mCAAG,WAAMC,GAAN,gGAECP,IAAAA,IAAA,UAAaF,EAAb,gBAAqC,CACxDG,OAAQ,CACNM,MAAAA,EACAL,QAASL,KALO,cAEdM,EAFc,yBAQbA,EAAOC,MARM,sCAUd,IAAIC,MAAM,KAAMV,SAVF,yDAAH,sDAcfa,EAAY,mCAAG,WAAOjC,GAAP,4FAAWkC,EAAX,+BAAkB,GAAlB,kBAEIT,IAAAA,IAAA,UAAaF,EAAb,iBAA8BvB,GAA9B,OAAmCkC,GAAQ,CAC9DR,OAAQ,CACNC,QAASL,KAJI,cAEXM,EAFW,yBAOVA,EAAOC,MAPG,sCASX,IAAIC,MAAM,KAAMV,SATL,yDAAH,sDAaLR,EAAM,CACjBqB,aAAAA,EACAT,YAAAA,EACAO,gBAAAA,E","sources":["components/Container/Container.styled.js","components/Container/Container.jsx","components/Movie-list/Movie-list.styled.js","components/Movie-list/Movie-list.jsx","pages/Home.jsx","services/api.services.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled('section')`\n  padding: 20px 30px;\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { Wrapper } from './Container.styled';\n\nexport const Container = ({ children }) => {\n    return (\n        <Wrapper>\n            {children}\n        </Wrapper>\n    )\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const List = styled('ul')`\n  margin: 0 auto;\n  padding: 0;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-auto-flow: row;\n  text-align: center;\n  gap: 10px;\n  list-style: none;\n`;\n\nexport const ListItem = styled('li')`\n  width: 100%;\n  padding-top: 5%;\n  text-align: center;\n  transition: all 300ms ease-in-out;\n\n  &:hover {\n    box-shadow: 0 0 23px 2px rgba(120, 40, 40, 0.3);\n  }\n`;\n\nexport const StyledLink = styled(Link)`\n  color: inherit;\n  text-decoration: none;\n`;\n\nexport const Image = styled('img')`\n  display: block;\n  margin: 0 auto;\n  width: 170px;\n`;\n","import PropTypes from 'prop-types';\nimport { ListItem, List, StyledLink, Image } from './Movie-list.styled';\n\nexport const MovieList = ({ movies, from }) => {\n    const elements = movies.map(({ name, title, id, poster_path }) =>\n        <ListItem key={id} >\n            <StyledLink to={`/movies/${id}`} state={{ from }} >\n                <Image src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={name || title} />\n                <p>{name || title}</p>\n            </StyledLink>\n        </ListItem>);\n    \n    return (\n        <List>\n            {elements}\n        </List>\n    )\n};\n\nMovieList.propTypes = {\n    from: PropTypes.string,\n    movies: PropTypes.arrayOf(PropTypes.shape({\n        name: PropTypes.string,\n        title: PropTypes.string,\n        id: PropTypes.number,\n        poster_path: PropTypes.string,\n    })\n)};\n","import { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport { API } from \"services/api.services\";\nimport { Container } from \"components/Container/Container\";\nimport { MovieList } from \"components/Movie-list/Movie-list\";\n\nconst Home = () => {\n    const [trendingFilms, setTrendingFilms] = useState([]);\n    const location = useLocation();\n\n    useEffect(() => {\n        API.getTrending().then((res) => {\n            setTrendingFilms(res.results)\n        }).catch(err => console.error(err.message))\n    }, []);\n\n    return (\n        <main>\n            <Container>\n                <h1>Trending Today</h1>\n                <MovieList movies={trendingFilms} from={location.pathname} />\n            </Container>\n        </main>\n    )\n};\n\nHome.propTypes = {\n    trendingFilms: PropTypes.array,\n    location: PropTypes.object,\n};\n\nexport default Home;\n","import axios from 'axios';\nconst API_KEY = 'b4aae86baf5bc9ee729e045fe7a7b511';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst getTrending = async () => {\n  try {\n    const result = await axios.get(`${BASE_URL}trending/movie/day`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nconst getSearchMovies = async query => {\n  try {\n    const result = await axios.get(`${BASE_URL}search/movie`, {\n      params: {\n        query,\n        api_key: API_KEY,\n      },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nconst getMovieById = async (id, info = '') => {\n  try {\n    const result = await axios.get(`${BASE_URL}movie/${id}${info}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const API = {\n  getMovieById,\n  getTrending,\n  getSearchMovies,\n};\n"],"names":["Wrapper","styled","Container","children","List","ListItem","StyledLink","Link","Image","MovieList","movies","from","elements","map","name","title","id","poster_path","to","state","src","alt","useState","trendingFilms","setTrendingFilms","location","useLocation","useEffect","API","then","res","results","catch","err","console","error","message","pathname","API_KEY","BASE_URL","getTrending","axios","params","api_key","result","data","Error","getSearchMovies","query","getMovieById","info"],"sourceRoot":""}