{"version":3,"file":"static/js/945.492067d0.chunk.js","mappings":"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","sources":["components/Container/Container.styled.js","components/Container/Container.jsx","components/Movie-item/Movie-item.styled.js","components/Movie-item/Movie-item.jsx","pages/Movie-details.jsx","services/api.services.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled('section')`\n  padding: 20px 30px;\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { Wrapper } from './Container.styled';\n\nexport const Container = ({ children }) => {\n    return (\n        <Wrapper>\n            {children}\n        </Wrapper>\n    )\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Wrapper = styled('div')`\n  display: flex;\n  gap: 30px;\n  text-align: left;\n`;\n\nexport const Thumb = styled('div')`\n  width: 30%;\n`;\n\nexport const Poster = styled('img')`\n  width: 100%;\n`;\n\nexport const Description = styled('div')`\n  width: 70%;\n`;\n\nexport const GenresItem = styled('li')`\n  padding: 4px;\n  font-size: 12px;\n  border-radius: 2px;\n  color: white;\n  background-color: darkviolet;\n`;\n\nexport const MovieNav = styled('ul')`\n  display: flex;\n  gap: 50px;\n  padding: 20px 0;\n  margin: 0;\n  list-style: none;\n`;\n\nexport const NavWrapper = styled('div')`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  font-size: 16px;\n  border-top: 1px solid black;\n  border-bottom: 1px solid black;\n  background-color: white;\n`;\n\nexport const MovieLink = styled(Link)`\n  font-size: 20px;\n  text-decoration: none;\n  color: darkviolet;\n`;\n\nexport const BackLink = styled(Link)`\n  padding: 5px;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  text-decoration: none;\n  font-size: 14px;\n  color: darkviolet;\n`;\n\nexport const GenresList = styled('ul')`\n  list-style: none;\n  display: flex;\n  gap: 10px;\n`;\n\nexport const GenresTitle = styled('h3')`\n  display: inline-block;\n`;\n","import { Suspense } from \"react\";\nimport { Outlet, useLocation } from \"react-router-dom\";\nimport { BsFillArrowLeftCircleFill } from 'react-icons/bs';\nimport PropTypes from 'prop-types';\nimport { Wrapper, Poster, Thumb, Description, GenresTitle, GenresList, GenresItem, MovieNav, NavWrapper, MovieLink, BackLink } from './Movie-item.styled';\nimport { Container } from 'components/Container/Container';\n\nexport const MovieItem = ({ movie }) => {\n    const location = useLocation();\n    const from = location.state.from;\n    const { name, title, genres, poster_path, vote_average, overview, release_date } = movie;\n    const extractedGenres = genres.map(({ name, id }) => <GenresItem key={id}>{name}</GenresItem>);\n\n    return (\n        <>\n            <Container>\n                <BackLink to={location.state?.from ?? '/home'}>\n                    <BsFillArrowLeftCircleFill />\n                    Go back\n                </BackLink>\n                <Wrapper>\n                    <Thumb>\n                        <Poster src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={name || title} />\n                    </Thumb>\n                    <Description>\n                        <h2>{name || title}<span> {`(${release_date.slice(0, 4)})`}</span></h2>\n                        <p>User Score: {Math.floor(vote_average * 10)}%</p>\n                        <h3>Overview</h3>\n                        <p>{overview}</p>\n                        <GenresTitle>Genres:</GenresTitle>\n                        <GenresList>\n                            {extractedGenres}\n                        </GenresList>\n                    </Description>\n                </Wrapper>\n            </Container>\n\n            <NavWrapper>\n                <MovieNav>\n                    <li>\n                        <MovieLink to=\"cast\" state={{ from }}>Cast</MovieLink>\n                    </li>\n                    <li>\n                        <MovieLink to=\"reviews\" state={{ from }}>Reviews</MovieLink>\n                    </li>\n                </MovieNav>\n            </NavWrapper>\n            <Suspense fallback={<div>Loading page...</div>}>\n                <Outlet />\n            </Suspense>\n        </>\n    )\n};\n\nMovieItem.propTypes = {\n    from: PropTypes.string,\n    cast: PropTypes.arrayOf(PropTypes.shape({\n        name: PropTypes.string,\n        title: PropTypes.string,\n        genres: PropTypes.array,\n        poster_path: PropTypes.string,\n        vote_average: PropTypes.number,\n        overview: PropTypes.string,\n        release_date: PropTypes.string,\n    })\n)};\n","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport { API } from 'services/api.services';\nimport { MovieItem } from \"components/Movie-item/Movie-item\";\n\nconst MovieDetails = () => {\n    const [movie, setMovie] = useState(null);\n    const [errorMessage, setErrorMessage] = useState('');\n    const [status, setStatus] = useState('idle');\n    const { moviesId } = useParams();\n\n    useEffect(() => {\n        API.getMovieById(moviesId).then((res) => {\n            setMovie(res);\n            setStatus('resolved');\n        }).catch((err) => {\n            setErrorMessage(\"Oops, something went wrong. Try again later\");\n            setStatus('rejected');\n            console.error(err.message);\n        });\n    }, [moviesId]);\n\n    return (\n        <>\n            {status === 'resolved' && <MovieItem movie={movie} />}\n            {status === 'rejected' && <p>{errorMessage}</p>}\n        </>\n    );\n};\n\nMovieDetails.propTypes = {\n    status: PropTypes.string,\n    movie: PropTypes.object,\n    errorMessage: PropTypes.string,\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\nconst API_KEY = 'b4aae86baf5bc9ee729e045fe7a7b511';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst getTrending = async () => {\n  try {\n    const result = await axios.get(`${BASE_URL}trending/movie/day`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nconst getSearchMovies = async query => {\n  try {\n    const result = await axios.get(`${BASE_URL}search/movie`, {\n      params: {\n        query,\n        api_key: API_KEY,\n      },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nconst getMovieById = async (id, info = '') => {\n  try {\n    const result = await axios.get(`${BASE_URL}movie/${id}${info}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const API = {\n  getMovieById,\n  getTrending,\n  getSearchMovies,\n};\n"],"names":["Wrapper","styled","Container","children","Thumb","Poster","Description","GenresItem","MovieNav","NavWrapper","MovieLink","Link","BackLink","GenresList","GenresTitle","MovieItem","movie","location","useLocation","from","state","name","title","genres","poster_path","vote_average","overview","release_date","extractedGenres","map","id","to","src","alt","slice","Math","floor","Suspense","fallback","useState","setMovie","errorMessage","setErrorMessage","status","setStatus","moviesId","useParams","useEffect","API","then","res","catch","err","console","error","message","API_KEY","BASE_URL","getTrending","axios","params","api_key","result","data","Error","getSearchMovies","query","getMovieById","info"],"sourceRoot":""}