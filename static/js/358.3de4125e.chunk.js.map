{"version":3,"file":"static/js/358.3de4125e.chunk.js","mappings":"sLAEaA,GAAUC,E,QAAAA,IAAO,UAAPA,CAAH,sE,SCCPC,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxB,OACI,SAACH,EAAD,UACKG,GAGZ,C,kJCPYC,GAAOH,EAAAA,EAAAA,IAAO,KAAPA,CAAH,uCAIJI,GAAWJ,EAAAA,EAAAA,IAAO,KAAPA,CAAH,qGAMRK,GAAOL,EAAAA,EAAAA,IAAO,IAAPA,CAAH,4G,SCTJM,EAAc,SAAC,GAAiB,IACnCC,EADkC,EAAdC,QACDC,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,GAAIC,EAAhB,EAAgBA,OAAhB,OAEzB,UAACR,EAAD,YACI,qCAAaQ,MACb,SAACP,EAAD,UAAOK,MAFIC,EAFU,IAO7B,OACI,SAACR,EAAD,UACKI,GAGZ,EC4BD,EArCgB,WACZ,OAA8BM,EAAAA,EAAAA,UAAS,MAAvC,eAAOL,EAAP,KAAgBM,EAAhB,KACA,GAA4BD,EAAAA,EAAAA,UAAS,QAArC,eAAOE,EAAP,KAAeC,EAAf,KACA,GAAwCH,EAAAA,EAAAA,UAAS,IAAjD,eAAOI,EAAP,KAAqBC,EAArB,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,SAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACNC,EAAAA,EAAAA,aAAiBH,EAAU,YAAYI,MAAK,SAACC,GACpCA,EAAIC,QAAQC,QAKjBZ,EAAWU,EAAIC,SACfT,EAAU,aALNA,EAAU,YAMjB,IAAEW,OAAM,SAACC,GACNV,EAAgB,+CAChBF,EAAU,YACVa,QAAQC,MAAMF,EAAIG,QACrB,GACJ,GAAE,CAACZ,KAGA,UAAClB,EAAA,EAAD,WACgB,cAAXc,IAA0B,8DACf,aAAXA,IAAyB,SAACT,EAAD,CAAaE,QAASA,IACpC,aAAXO,IAAyB,qCAAaE,OAGlD,C,2GCnCKe,EAAU,mCACVC,EAAW,gCAEXC,EAAW,mCAAG,6GAEKC,IAAAA,IAAA,UAAaF,EAAb,sBAA2C,CAC9DG,OAAQ,CACNC,QAASL,KAJG,cAEVM,EAFU,yBAOTA,EAAOC,MAPE,sCASV,IAAIC,MAAM,KAAMT,SATN,yDAAH,qDAaXU,EAAe,mCAAG,WAAMC,GAAN,gGAECP,IAAAA,IAAA,UAAaF,EAAb,gBAAqC,CACxDG,OAAQ,CACNM,MAAAA,EACAL,QAASL,KALO,cAEdM,EAFc,yBAQbA,EAAOC,MARM,sCAUd,IAAIC,MAAM,KAAMT,SAVF,yDAAH,sDAcfY,EAAY,mCAAG,WAAOhC,GAAP,4FAAWiC,EAAX,+BAAkB,GAAlB,kBAEIT,IAAAA,IAAA,UAAaF,EAAb,iBAA8BtB,GAA9B,OAAmCiC,GAAQ,CAC9DR,OAAQ,CACNC,QAASL,KAJI,cAEXM,EAFW,yBAOVA,EAAOC,MAPG,sCASX,IAAIC,MAAM,KAAMT,SATL,yDAAH,sDAaLT,EAAM,CACjBqB,aAAAA,EACAT,YAAAA,EACAO,gBAAAA,E","sources":["components/Container/Container.styled.js","components/Container/Container.jsx","components/Reviews/ReviewsList.styled.js","components/Reviews/ReviewsList.jsx","components/Reviews/Reviews.jsx","services/api.services.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled('section')`\n  padding: 20px 30px;\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { Wrapper } from './Container.styled';\n\nexport const Container = ({ children }) => {\n    return (\n        <Wrapper>\n            {children}\n        </Wrapper>\n    )\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n","import styled from 'styled-components';\n\nexport const List = styled('ul')`\n  padding: 0;\n`;\n\nexport const ListItem = styled('li')`\n  text-align: left;\n  list-style: none;\n  border-bottom: 1px solid black;\n`;\n\nexport const Text = styled('p')`\n  width: 80%;\n  font-size: 14px;\n  letter-spacing: 0.05rem;\n  line-height: 1.3;\n`;\n","import PropTypes from 'prop-types';\nimport { List, ListItem, Text } from './ReviewsList.styled';\n\nexport const ReviewsList = ({ reviews }) => {\n    const elements = reviews.map(({ content, id, author }) => (\n\n        <ListItem key={id}>\n            <h3>Author: {author}</h3>\n            <Text>{content}</Text>\n        </ListItem>));\n    \n    return (\n        <List>\n            {elements}\n        </List>\n    );\n};\n\nReviewsList.propTypes = {\n    reviews: PropTypes.arrayOf(PropTypes.shape({\n        content: PropTypes.string,\n        id: PropTypes.string,\n        author: PropTypes.string,\n    })\n)};\n","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport { API } from 'services/api.services';\nimport { Container } from 'components/Container/Container';\nimport { ReviewsList } from './ReviewsList';\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState(null);\n    const [status, setStatus] = useState('idle');\n    const [errorMessage, setErrorMessage] = useState('');\n    const { moviesId } = useParams();\n\n    useEffect(() => {\n        API.getMovieById(moviesId, '/reviews').then((res) => {\n            if (!res.results.length) {\n                setStatus('not found');\n                return;\n            };\n            \n            setReviews(res.results);\n            setStatus('resolved');\n        }).catch((err) => {\n            setErrorMessage(\"Oops, something went wrong. Try again later\");\n            setStatus('rejected');\n            console.error(err.message);\n        })\n    }, [moviesId]);\n\n    return (\n        <Container>\n            {status === 'not found' && <p>There're no reviews for this movie</p>}\n            {status === 'resolved' && <ReviewsList reviews={reviews} />}\n            {status === 'rejected' && <p>`Sorry! ${errorMessage}</p>}\n        </Container>\n    );\n};\n\nReviews.propTypes = {\n    status: PropTypes.string,\n    reviews: PropTypes.array,\n    errorMessage: PropTypes.string,\n};\n\nexport default Reviews;\n","import axios from 'axios';\nconst API_KEY = 'b4aae86baf5bc9ee729e045fe7a7b511';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst getTrending = async () => {\n  try {\n    const result = await axios.get(`${BASE_URL}trending/movie/day`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nconst getSearchMovies = async query => {\n  try {\n    const result = await axios.get(`${BASE_URL}search/movie`, {\n      params: {\n        query,\n        api_key: API_KEY,\n      },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nconst getMovieById = async (id, info = '') => {\n  try {\n    const result = await axios.get(`${BASE_URL}movie/${id}${info}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const API = {\n  getMovieById,\n  getTrending,\n  getSearchMovies,\n};\n"],"names":["Wrapper","styled","Container","children","List","ListItem","Text","ReviewsList","elements","reviews","map","content","id","author","useState","setReviews","status","setStatus","errorMessage","setErrorMessage","moviesId","useParams","useEffect","API","then","res","results","length","catch","err","console","error","message","API_KEY","BASE_URL","getTrending","axios","params","api_key","result","data","Error","getSearchMovies","query","getMovieById","info"],"sourceRoot":""}